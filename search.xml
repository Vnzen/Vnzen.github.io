<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Debian 9 - 本服务器搭建完整记录</title>
      <link href="/2020/03/10/debian-9-ben-fu-wu-qi-da-jian-wan-zheng-ji-lu/"/>
      <url>/2020/03/10/debian-9-ben-fu-wu-qi-da-jian-wan-zheng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器安装caddy"><a href="#服务器安装caddy" class="headerlink" title="服务器安装caddy"></a>服务器安装caddy</h2><p>在 Debian9 中安装caddy是比较方便的,你也可以在<a href="https://caddyserver.com/" target="_blank" rel="noopener">caddy官网</a>下载</p><pre class="line-numbers language-bash"><code class="language-bash">$ apt update$ apt <span class="token function">install</span> caddy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装好后,在<code>/etc/caddy/</code>下会有一个<code>Caddyfile</code> 文件,如果没有,就创建一个,然后编辑它</p><pre class="line-numbers language-bash"><code class="language-bash">$ vim /etc/caddy/Caddyfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置,参考<a href="https://dengxiaolong.com/caddy/zh/" target="_blank" rel="noopener">caddy中文帮助文档</a></p><pre class="line-numbers language-bash"><code class="language-bash">vnnznn.cn <span class="token punctuation">{</span>    redir www.vnnznn.cn<span class="token punctuation">{</span>url<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 把vnnznn.cn重定向到www.vnnznn.cn</span><span class="token punctuation">}</span>www.vnnznn.cn <span class="token punctuation">{</span>    root /home/www/website          <span class="token comment" spellcheck="true"># 服务器根目录</span>    <span class="token function">gzip</span>                            <span class="token comment" spellcheck="true"># 如果浏览器支持,开启gzip压缩</span>    timeouts none    <span class="token comment" spellcheck="true"># proxy / 127.0.0.1:4000 {        # 把访问www.vnnznn.cn全部代理道本地4000端口</span>    <span class="token comment" spellcheck="true">#     without /vennzenn           # 除开/vennzenn</span>    <span class="token comment" spellcheck="true">#     websocket                   # 使用websocket</span>    <span class="token comment" spellcheck="true"># }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>caddy常用命令</p><pre class="line-numbers language-bash"><code class="language-bash">$ caddy -conf /etc/caddy/Caddyfile      <span class="token comment" spellcheck="true"># 启动并指定配置文件</span>$ systemctl start caddy.service         <span class="token comment" spellcheck="true"># 启动caddy</span>$ systemctl restart caddy.service       <span class="token comment" spellcheck="true"># 重启caddy</span>$ systemctl stop caddy.service          <span class="token comment" spellcheck="true"># 停止</span>$ systemctl <span class="token function">enable</span> caddy.service        <span class="token comment" spellcheck="true"># 开机自启</span>$ systemctl disable caddy.service       <span class="token comment" spellcheck="true"># 禁止开机自启</span>$ <span class="token function">netstat</span> -tnlp <span class="token operator">|</span> <span class="token function">grep</span> :443             <span class="token comment" spellcheck="true"># 查看443端口占用情况</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装Git及配置仓库"><a href="#安装Git及配置仓库" class="headerlink" title="安装Git及配置仓库"></a>安装Git及配置仓库</h3><p>主要目的是让个人的电脑可以通过ssh方式将我们的博客部署到服务器上。操作如下：<br>安装git:</p><pre class="line-numbers language-bash"><code class="language-bash">$ apt <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加一个<code>git</code>用户,并设置<code>git</code>用户的密码</p><pre class="line-numbers language-bash"><code class="language-bash">$ adduser <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到git用户，然后在~目录下创建.ssh文件夹</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">su</span> <span class="token function">git</span>$ <span class="token function">cd</span> ~ <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> .ssh <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> .ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成公钥密钥文件</p><pre class="line-numbers language-bash"><code class="language-bash">$ ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时在目录下就会有两个文件，分别是<br><code>id_rsa</code>(私钥) 和 <code>id_rsa.pub</code>(公钥)<br>复制一份公钥文件</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cp</span> id_rsa.pub authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样目录下就会有一个authorized_keys文件，它和id_rsa.pub一模一样。<br>最后我们修改它的权限</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">chmod</span> 600 ~/.ssh/authorized_keys$ <span class="token function">chmod</span> 700 ~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在自己的电脑上，使用ssh方式连接我们的云服务器,一定要成功才行</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ssh</span> git@你的服务器ip      <span class="token comment" spellcheck="true"># 输入你刚刚设置的git用户密码,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一定要成功才行,一定要成功才行,一定要成功才行<br>成功后,我们直接通过git用户创建一个git的仓库，并且新建一个post-receive文件，操作如下:</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~$ <span class="token function">git</span> init --bare blog.git$ <span class="token keyword">echo</span> <span class="token string">"git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f"</span> <span class="token operator">>></span> ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>授予该文件可执行权限  </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x ~/blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回到root用户,创建<code>/home/www/website</code>,并赋予任何用户可读可写的权限</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> /home/www <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> /home/www/website$ <span class="token function">chmod</span> -R o+r+w /home/www      <span class="token comment" spellcheck="true"># 给所有人读写</span>$ <span class="token function">chmod</span> -R o+x+w /home/www         <span class="token comment" spellcheck="true"># 给所有人增加执行和写权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此就完成了所有关于服务器端的配置</p><h2 id="本地安装hexo"><a href="#本地安装hexo" class="headerlink" title="本地安装hexo"></a>本地安装hexo</h2><p>注意hexo需要git以及node</p><h3 id="安装nvm"><a href="#安装nvm" class="headerlink" title="安装nvm"></a>安装nvm</h3><p>nvm是node版本管理工具<br>为了解决node各种版本存在不兼容现象<br>nvm是让你在同一台机器上安装和切换不同版本的node的工具<br>Debian9默认源的node只有一个,不推荐使用系统安装的,推荐使用nvm版本管理器, <a href="https://github.com/nvm-sh/nvm.git" target="_blank" rel="noopener">一键安装nvm</a></p><pre class="line-numbers language-bash"><code class="language-bash">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后,需要<code>重启bash</code>才能生效,查看nvm版本</p><pre class="line-numbers language-bash"><code class="language-bash">$ nvm --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><p>安装nvm后开始安装node,安装node最新稳定版</p><pre class="line-numbers language-bash"><code class="language-bash">$ nvm <span class="token function">install</span> stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过<code>nvm list</code> 列出已安装的版本</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">可以参考hexo官网</a></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g$ hexo init blog            <span class="token comment" spellcheck="true"># 生成一个名为blog的博客目录</span>$ <span class="token function">cd</span> blog$ <span class="token function">npm</span> <span class="token function">install</span>               <span class="token comment" spellcheck="true"># 初始化博客目录</span>$ hexo clean                <span class="token comment" spellcheck="true"># 清除缓存</span>$ hexo generate             <span class="token comment" spellcheck="true"># 生成静态文件</span>$ hexo server -p 4000       <span class="token comment" spellcheck="true"># 启动web服务,默认端口也是4000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此,服务器搭建完成了,每次更换主题后一定要通过<code>hexo clean</code>清除缓存,否侧很容易发生各种各样的bug<br>修改blog目录下的<code>_config.yml</code>文件,找到deploy配置修改如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>deploy:  type: <span class="token function">git</span>  repo: git@服务器IP地址:/home/git/blog.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署到服务器上"><a href="#部署到服务器上" class="headerlink" title="部署到服务器上"></a>部署到服务器上</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save    <span class="token comment" spellcheck="true"># 安装部署所需的插件</span>hexo clean <span class="token operator">&amp;&amp;</span> hexo generate --deploy    <span class="token comment" spellcheck="true"># 部署到指定的deploy上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p><img src="./../../themes/hexo-theme-matery/source/medias/img/git_bushu.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Debian9 </tag>
            
            <tag> caddy </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模版测试</title>
      <link href="/2020/03/10/mo-ban-ce-shi/"/>
      <url>/2020/03/10/mo-ban-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><ul><li><p>你好，世界</p><ul><li><p>你好</p></li><li><p>你好</p><ul><li><p>你好</p><ul><li><p>你好</p><ul><li><p>你好</p><ul><li><p>你好</p></li><li><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"Hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li></ul></li></ul></li><li><p>你好</p></li></ul></li><li><p>世界，你好</p></li></ul><h3 id="标题三"><a href="#标题三" class="headerlink" title="标题三"></a>标题三</h3><ul><li>副标题<ol><li>你好</li><li>你好<ul><li>s<ul><li>w</li></ul></li><li>w</li></ul></li><li>你好</li></ol></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/10/hello-world/"/>
      <url>/2020/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
